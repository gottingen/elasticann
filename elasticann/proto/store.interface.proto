// Copyright 2023 The Turbo Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
syntax="proto2";
package EA.proto;
import "elasticann/proto/raft.proto";
import "elasticann/proto/meta.struct.proto";
import "elasticann/proto/store.struct.proto";
option cc_generic_services = true;
//option cc_enable_arenas = true;

service StoreService {
    //1、创建table时master调用，region及raft同步创建成功后才返回给metaServer,
    //   创建表时raft node地址初始化为一个节点
    //2、实例迁移的add_peer过程间接通过心跳包的响应包调用，
    //   raft node地址初始化为空
    //   leader调用完成这个之后主动调用一次raft的add_peer接口完成这个迁移过程
    //3、分裂时调用
    rpc init_region(InitRegion) returns (StoreRes);
    
    //raft控制接口，可以手工操作使用
    rpc region_raft_control(RaftControlRequest) returns (RaftControlResponse); 
    
    rpc health_check(HealthCheck) returns (StoreRes);

    //快速应用raft日志,分裂使用
    rpc async_apply_log_entry(BatchStoreReq) returns (BatchStoreRes);

    //增删改查功能，需要走raft状态机的都通过此接口
    rpc query(StoreReq) returns (StoreRes);

    //binlog相关操作
    rpc query_binlog(StoreReq) returns (StoreRes);
    
    //删除region，包括数据
    rpc remove_region(RemoveRegion) returns (StoreRes);
    
    //leader收到的AddPeer请求，分两步执行
    //1、给新增的region所在的store发送init region请求
    //2、leader执行raft的add_peer操作
    rpc add_peer(AddPeer) returns (StoreRes);

    //get region的applied_index, 用来分裂完成后优化选择transfer leader的对象
    //复用，获取snapshot数据大小，用作校验
    rpc get_applied_index(GetAppliedIndex) returns (StoreRes);

    rpc compact_region(RegionIds) returns (StoreRes);

    rpc snapshot_region(RegionIds) returns(StoreRes);

    rpc restore_region(RegionIds) returns(StoreRes);

    rpc manual_split_region(RegionIds) returns(StoreRes);

    rpc query_region(RegionIds) returns (StoreRes);
    
    rpc query_illegal_region(RegionIds) returns (StoreRes);

    rpc backup_region(BackUpReq) returns (BackUpRes);

    rpc backup(BackupRequest) returns (BackupResponse);

    rpc get_rocks_statistic(RocksStatisticReq) returns (RocksStatisticRes);
};
